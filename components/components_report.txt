# Báo cáo chức năng các tệp trong thư mục `components`

## AgeAwareAvatarPreview.tsx
Thành phần này chịu trách nhiệm hiển thị một hình đại diện thay đổi diện mạo dựa trên tuổi của nhân vật.
- Nó nhận các props `manifest` (cấu hình hình đại diện), `images` (tài sản hình ảnh), `character` (dữ liệu nhân vật bao gồm tuổi và trạng thái hình đại diện), và `size`.
- Nó xác định `AgeStage` (em bé, trẻ em, thiếu niên, người lớn, người già) từ tuổi của nhân vật.
- Nó tự động chọn các biến thể hình ảnh phù hợp cho từng lớp hình đại diện dựa trên `AgeStage`.
- Nó hỗ trợ hình đại diện tĩnh cho các nhân vật cụ thể.
- Nó bao gồm logic tạo chỗ giữ chỗ cho các phần hình đại diện bị thiếu, tạo chỗ giữ chỗ SVG với màu sắc và nhãn duy nhất.
- Nó sử dụng các thành phần `React Native` `View` và `Image` để hiển thị.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho bố cục đáp ứng và các hiệu ứng hình ảnh cơ bản (bóng, góc bo tròn).

## AvatarBuilder.tsx
Thành phần này cung cấp giao diện người dùng để người dùng tùy chỉnh hình đại diện của họ.
- Nó nhận các props `manifest` (cấu hình hình đại diện), `character` (dữ liệu nhân vật ban đầu), `images` (tài sản hình ảnh), `onSave` (callback để lưu thay đổi) và `onClose` (callback để đóng trình tạo).
- Nó quản lý trạng thái của hình đại diện (các lớp và màu sắc đã chọn) bằng cách sử dụng `useState`.
- Nó tự động điều chỉnh kích thước của các nút tùy chọn hình đại diện dựa trên chiều rộng của vùng chứa.
- Nó bao gồm logic để vô hiệu hóa một số tùy chọn hình đại diện nhất định (ví dụ: râu cho nhân vật nữ hoặc trẻ em).
- **Chức năng ngẫu nhiên hóa:** Cho phép người dùng ngẫu nhiên hóa diện mạo của hình đại diện dựa trên một hạt giống, đảm bảo phù hợp với tuổi và giới tính.
- **Lựa chọn lớp:** Người dùng có thể chọn các lớp hình đại diện khác nhau (ví dụ: tóc, mắt, quần áo) và chọn các tùy chọn trong mỗi lớp.
- **Lựa chọn màu sắc:** (Đã triển khai một phần/đã nhận xét) Nó có các điều khoản để chọn màu cho một số lớp nhất định như tóc và lông mày.
- Nó sử dụng lại `AgeAwareAvatarPreview` để hiển thị tùy chỉnh hình đại diện hiện tại.
- Nó cung cấp các nút "Lưu" và "Hủy" để quản lý quá trình tùy chỉnh.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho một bố cục có cấu trúc và đáp ứng.

## BusinessManagementModal.tsx
Thành phần này hiển thị một modal để quản lý một doanh nghiệp cụ thể thuộc sở hữu của gia đình người chơi.
- Nó nhận các props `business` (đối tượng doanh nghiệp), `gameState` (trạng thái trò chơi hiện tại), `onAssignToBusiness` (callback để gán nhân vật vào các vị trí), `onUpgradeBusiness` (callback để nâng cấp doanh nghiệp), `onClose` (callback để đóng modal), `lang` (ngôn ngữ hiện tại để bản địa hóa), `images` và `manifest`.
- Nó hiển thị tên và cấp độ của doanh nghiệp.
- Nó liệt kê các "vị trí" có sẵn trong doanh nghiệp, hiển thị ai hiện đang được gán (thành viên gia đình hoặc robot) hoặc nếu vị trí chưa được gán.
- Đối với mỗi vị trí, nó cho phép gán các thành viên gia đình có sẵn (những người trưởng thành, chưa nghỉ hưu và không làm việc ở doanh nghiệp khác) hoặc thuê một robot.
- Nó hiển thị hình đại diện của nhân vật (sử dụng `AgeAwareAvatarPreview`), vai trò, chuyên ngành yêu cầu và mức lương được tính toán cho các thành viên gia đình được gán.
- Nó cung cấp nút "Nâng cấp" nếu doanh nghiệp chưa đạt cấp độ tối đa và người chơi có đủ tiền.
- Nó sử dụng `ComicPanelModal` làm cơ sở, gợi ý một cách trình bày theo phong cách truyện tranh.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để có bố cục rõ ràng và có tổ chức.

## BusinessManagementPanel.tsx
Tệp này hiện đang trống.

## BusinessMap.tsx
Thành phần này hiển thị một bản đồ tương tác nơi người dùng có thể xem, mua và quản lý các doanh nghiệp.
- Nó nhận các props `gameState`, `onBuyBusiness`, `onManageBusiness`, `lang`, `images`, `manifest`, `mainView` và `onBackToTree`.
- Nó hiển thị một `BusinessMapSVG` (có lẽ là bản đồ trực quan).
- **Điểm nóng kinh doanh:** Phủ các "điểm nóng" tương tác trên bản đồ đại diện cho các loại hình kinh doanh khác nhau.
    - Đối với các doanh nghiệp chưa sở hữu, nó hiển thị chi phí mua và cho phép người dùng bắt đầu mua.
    - Đối với các doanh nghiệp đã sở hữu, nó hiển thị thu nhập ròng của doanh nghiệp và hiển thị hình đại diện của các thành viên gia đình/robot được giao. Nó cũng cho phép người dùng quản lý doanh nghiệp.
- **Modal mua doanh nghiệp:** Một thành phần con (`BusinessPurchaseModal`) được sử dụng để xác nhận việc mua một doanh nghiệp mới, hiển thị chi phí và doanh thu cơ bản của nó.
- **Modal lựa chọn quản lý doanh nghiệp:** Một thành phần con khác (`BusinessManageSelectionModal`) được sử dụng khi người dùng sở hữu nhiều doanh nghiệp cùng loại, cho phép họ chọn doanh nghiệp nào để quản lý.
- **Điều khiển thu phóng:** Bao gồm một thanh trượt để điều khiển mức thu phóng của bản đồ.
- Nó sử dụng `AgeAwareAvatarPreview` và `RobotAvatarIcon` để hiển thị các nhân viên được giao.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho một giao diện bản đồ trực quan và tương tác.

## BusinessMapSVG.tsx
Thành phần này là một thành phần trình bày đơn giản hiển thị hình ảnh nền cho bản đồ kinh doanh.
- Nó sử dụng thành phần `Image` của `React Native` để hiển thị tài sản `business-map.webp`.
- Nó được thiết kế để bao phủ vùng chứa cha của nó, cung cấp cơ sở trực quan cho bản đồ kinh doanh tương tác.
- Kiểu dáng tối thiểu, tập trung vào định vị và kích thước hình ảnh.

## CareerChoiceModal.tsx
Thành phần này trình bày một modal cho phép nhân vật chọn con đường sự nghiệp.
- Nó nhận các props `character` (nhân vật đưa ra lựa chọn), `options` (một mảng các khóa tùy chọn nghề nghiệp), `onSelect` (callback khi lựa chọn được thực hiện), `currentFunds` (cho chi phí đào tạo nghề) và `lang`.
- Nó hiển thị tiêu đề và mô tả cho lựa chọn nghề nghiệp.
- Nó lặp qua các `options` được cung cấp và hiển thị một `ChoiceButton` cho mỗi tùy chọn.
- Đối với các tùy chọn `CAREER_LADDER`, nó hiển thị:
    - Tên và mô tả của con đường sự nghiệp.
    - Biểu tượng "⭐" nếu chuyên ngành của nhân vật khớp với chuyên ngành yêu cầu.
    - Biểu tượng "⚠️" với chú giải công cụ nếu nhân vật không đủ tiêu chuẩn (thiếu IQ hoặc EQ).
- Đối với các tùy chọn chung như 'job', 'internship' hoặc 'vocational', nó hiển thị tên và mô tả của chúng.
- Đối với đào tạo 'vocational', nó hiển thị chi phí và cho biết liệu nhân vật có đủ khả năng chi trả hay không.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và dễ đọc các lựa chọn.

## CharacterDetailModal.tsx
Thành phần này hiển thị một modal với thông tin chi tiết về một nhân vật cụ thể.
- Nó nhận các props `character` (nhân vật cần hiển thị), `gameState`, `onClose`, `onCustomize` (callback để tùy chỉnh hình đại diện), `lang`, `manifest`, `images` và `clubs`.
- Nó trình bày thông tin nhân vật trong hai tab: "Chi tiết" và "Sự kiện cuộc đời".
- **Tab Chi tiết:**
    - Hiển thị thông tin cơ bản như giai đoạn, trạng thái, tuổi, tình trạng mối quan hệ, học vấn và sự nghiệp.
    - Hiển thị hình đại diện của nhân vật bằng cách sử dụng `AgeAwareAvatarPreview`.
    - Hiển thị các sự kiện cuộc đời gần đây (3 sự kiện cuối cùng).
    - Trực quan hóa các chỉ số nhân vật (IQ, Hạnh phúc, EQ, Sức khỏe, Kỹ năng) bằng các thanh tiến trình.
    - Cung cấp nút "Tùy chỉnh" để mở trình tạo hình đại diện cho nhân vật (nếu không phải là hình đại diện tĩnh).
- **Tab Sự kiện cuộc đời:**
    - Liệt kê tất cả các sự kiện cuộc đời liên quan đến nhân vật bằng cách sử dụng thành phần `LogEntry`.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho một bố cục đáp ứng và có tổ chức.

## CharacterNode.tsx
Thành phần này đại diện cho một nhân vật duy nhất trong cây gia đình hoặc màn hình tương tự, hiển thị hình đại diện và thông tin cơ bản của họ.
- Nó nhận các props `character` (dữ liệu nhân vật), `onClick` (callback khi nút được nhấn), `lang`, `manifest` và `images`.
- Nó tự động tính toán kích thước của nó dựa trên chiều rộng màn hình để phù hợp với nhiều nút trên mỗi hàng.
- Nó hiển thị hình đại diện của nhân vật bằng cách sử dụng `AgeAwareAvatarPreview`.
- Nó hiển thị tên và tuổi của nhân vật (nếu còn sống).
- **Hoạt ảnh thu nhập:** Nếu nhân vật có `monthlyNetIncome` khác 0 và còn sống, nó sẽ hiển thị thu nhập của họ và phát hoạt ảnh "tiền bay" một cách định kỳ.
- Nó phân biệt nhân vật người chơi bằng màu viền khác.
- Nó áp dụng kiểu đã chết (độ mờ) nếu nhân vật không còn sống.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để hiển thị đáp ứng và trực quan.

## ChoiceButton.tsx
Thành phần này cung cấp một nút có thể tùy chỉnh với hoạt ảnh nhấn, thường được sử dụng để đưa ra lựa chọn trong các modal hoặc menu.
- Nó nhận các props `onClick` (callback khi nút được nhấn), `disabled` (boolean để vô hiệu hóa nút) và `children` (nội dung hiển thị bên trong nút).
- Nó sử dụng `react-native-reanimated` để tạo hoạt ảnh nhấn tinh tế, trong đó nút di chuyển xuống và chiều rộng đường viền dưới của nó thay đổi khi được nhấn.
- Nó xử lý các sự kiện `onPressIn` và `onPressOut` để kiểm soát trạng thái hoạt ảnh.
- Nó hiển thị trạng thái bị vô hiệu hóa bằng cách giảm độ mờ và thay đổi màu nền.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để có giao diện nhất quán.

## ClubChoiceModal.tsx
Thành phần này trình bày một modal cho phép nhân vật chọn một câu lạc bộ để tham gia.
- Nó nhận các props `character` (nhân vật đưa ra lựa chọn), `clubs` (một mảng các câu lạc bộ có sẵn), `onSelect` (callback khi một câu lạc bộ được chọn), `onSkip` (callback để bỏ qua lựa chọn câu lạc bộ) và `lang`.
- Nó hiển thị tiêu đề và mô tả cho lựa chọn câu lạc bộ.
- Nó lặp qua các `clubs` được cung cấp và hiển thị tên và mô tả của từng câu lạc bộ.
- Mỗi câu lạc bộ có một nút "Tham gia câu lạc bộ".
- Nó cũng cung cấp một nút "Bỏ qua" để bỏ qua lựa chọn câu lạc bộ.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho bố cục dạng lưới của các tùy chọn câu lạc bộ.

## ComicPanelModal.tsx
Thành phần này đóng vai trò là một trình bao bọc modal chung, được thiết kế để mang lại tính thẩm mỹ "bảng truyện tranh".
- Nó nhận các props `visible` (boolean để kiểm soát khả năng hiển thị), `onClose` (callback khi modal được yêu cầu đóng), `children` (nội dung hiển thị bên trong modal), `rotate` (xoay CSS cho bảng) và `flexContent` (boolean để làm cho nội dung linh hoạt).
- Nó sử dụng thành phần `Modal` của `React Native` để phủ nội dung.
- Nó áp dụng một lớp phủ màu đen bán trong suốt cho nền.
- Bảng modal chính có đường viền kiểu truyện tranh riêng biệt và một chút xoay.
- Nó ngăn các nhấp chuột "xuyên qua" bảng modal đến nội dung bên dưới.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho giao diện bảng truyện tranh.

## EventModal.tsx
Thành phần này hiển thị một modal cho một sự kiện trò chơi, trình bày các lựa chọn và hiển thị kết quả.
- Nó nhận các props `eventData` (chi tiết sự kiện), `character` (nhân vật liên quan), `onChoice` (callback khi lựa chọn được thực hiện), `onClose` (callback để đóng modal), `lang`, `images`, `manifest` và `onAvatarClick`.
- Nó hiển thị tiêu đề sự kiện, nhân vật liên quan và mô tả sự kiện.
- **Giai đoạn lựa chọn:**
    - Trình bày danh sách các lựa chọn cho sự kiện.
    - Mỗi nút lựa chọn hiển thị văn bản và các thay đổi quỹ tiềm năng.
    - Nó cũng chỉ ra các sự kiện được kích hoạt tiềm năng và cơ hội của chúng.
- **Giai đoạn kết quả:**
    - Sau khi lựa chọn được thực hiện, nó chuyển sang hiển thị kết quả.
    - Hiển thị thông báo mô tả kết quả.
    - Trực quan hóa các thay đổi đối với quỹ gia đình và chỉ số nhân vật bằng cách sử dụng các thành phần `StatBar`.
    - Nút "OK" (với hoạt ảnh nhấn tinh tế) đóng modal sau một khoảng thời gian trễ hoặc ngay lập tức nếu được nhấp.
- Nó sử dụng `AgeAwareAvatarPreview` để hiển thị hình đại diện của nhân vật, có thể nhấp để xem chi tiết nhân vật.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày sự kiện rõ ràng và tương tác.

## FamilyAssetsPanel.tsx
Thành phần này hiển thị một bảng điều khiển để quản lý và mua tài sản gia đình (ví dụ: nhà ở, phương tiện, nghệ thuật).
- Nó nhận các props `purchasedAssets` (một bản ghi các tài sản sở hữu), `familyFund` (tiền gia đình hiện tại), `onPurchaseAsset` (callback để mua tài sản) và `lang`.
- Nó hiển thị tổng giá trị của tất cả các tài sản gia đình sở hữu.
- Nó phân loại tài sản theo loại (ví dụ: "Nhà ở", "Phương tiện") và hiển thị chúng trong một lưới.
- **Thành phần AssetSlot:** Một thành phần con đại diện cho một tài sản duy nhất.
    - Hiển thị hình ảnh, tên và cấp độ của tài sản.
    - Hiển thị trực quan nếu tài sản được sở hữu hoặc nếu nó có thể được mua.
    - Khi nhấp vào, nó sẽ mở một `AssetDetailModal`.
- **Thành phần AssetDetailModal:** Một thành phần con hiển thị thông tin chi tiết về một tài sản đã chọn.
    - Hiển thị hình ảnh, tên, mô tả, chi phí, cấp độ và tác động của tài sản đối với các chỉ số nhân vật.
    - Cung cấp nút "Mua" nếu tài sản không được sở hữu và có thể mua được, hoặc nhãn "Đã sở hữu" nếu đã mua.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để hiển thị tài sản có cấu trúc và trực quan.

## FamilyTree.tsx
Thành phần này trực quan hóa cây gia đình của các nhân vật, cho phép tương tác kéo và phóng to.
- Nó nhận các props `gameState` (chứa các thành viên gia đình), `lang`, `manifest`, `images`, `onSelectCharacter` (callback khi một nút nhân vật được chọn) và `selectedCharacter`.
- **Thuật toán bố cục cây:** Nó bao gồm một thuật toán phức tạp (`calculateSubtreeLayout`) để tự động tính toán `x`, `y` và `width` cho mỗi nút nhân vật để tạo thành một cấu trúc cây phân cấp. Thuật toán này xử lý các đối tác và con cái, đảm bảo khoảng cách và căn chỉnh phù hợp.
- **Xử lý cử chỉ:** Sử dụng `react-native-gesture-handler` (`PanGestureHandler` và `PinchGestureHandler`) để enable panning and zooming of the family tree.
- **Tương tác hoạt hình:** Tận dụng `react-native-reanimated` để tạo hoạt hình mượt mà trong quá trình kéo và phóng to.
- **Nút nhân vật:** Hiển thị mỗi nhân vật dưới dạng thành phần `CharacterNode`, hiển thị hình đại diện và tên của họ.
- **Kết nối:** Vẽ các đường (sử dụng các phần tử `Path` của `react-native-svg`) để kết nối các thành viên gia đình, đại diện cho quan hệ đối tác và quan hệ cha-con.
- **Căn giữa:** Khi `selectedCharacter` thay đổi, nó sẽ tạo hoạt hình cây để căn giữa nhân vật đó.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho vùng chứa tổng thể và các phần tử cây.

## GameLog.tsx
Thành phần này hiển thị nhật ký thời gian của các sự kiện trò chơi và tác động của chúng.
- Nó nhận các props `log` (một mảng các đối tượng `GameLogEntry`), `familyMembers` (để biết chi tiết nhân vật), `lang` và một `ListHeaderComponent` tùy chọn.
- Nó sử dụng `FlatList` để hiển thị hiệu quả các mục nhật ký.
- **Thành phần LogEntry:** Một thành phần con hiển thị một mục nhật ký trò chơi duy nhất.
    - Hiển thị năm của sự kiện.
    - Hiển thị nhân vật liên quan (nếu có), tiêu đề sự kiện và thông báo chi tiết.
    - **Thành phần LogStatChanges:** Một thành phần con trong `LogEntry` trực quan hóa các thay đổi đối với quỹ gia đình và chỉ số nhân vật (IQ, Hạnh phúc, EQ, Sức khỏe, Kỹ năng) bằng cách sử dụng các biểu tượng và giá trị số (ví dụ: "+10", "-$500"). Các thay đổi tích cực có màu xanh lá cây, tiêu cực có màu đỏ.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để có định dạng nhật ký rõ ràng và dễ đọc.

## GameUI.tsx
Đây là thành phần UI chính của trò chơi, chịu trách nhiệm hiển thị giao diện trò chơi tổng thể, quản lý các chế độ xem/cảnh trò chơi khác nhau và điều phối các tương tác với các modal và logic trò chơi khác nhau.
- Nó nhận nhiều props liên quan đến trạng thái trò chơi, tương tác người dùng và các callback cho các hành động trong trò chơi (ví dụ: `onStartGame`, `onEventChoice`, `onPurchaseAsset`).
- **Quản lý chế độ xem:** Nó xử lý các chế độ xem trò chơi cấp cao nhất khác nhau:
    - `menu`: Hiển thị `StartMenu` và `InstructionsModal`.
    - `welcome_back`: Hiển thị `WelcomeBackMenu`.
    - `gameover`: Hiển thị `SummaryScreen`.
    - `playing`: Đây là chế độ xem trò chơi chính, quản lý thêm `activeScene`.
- **Quản lý cảnh (`activeScene`):** Nó sử dụng một thành phần `BottomNav` để chuyển đổi giữa các cảnh chính:
    - `tree`: Hiển thị thành phần `FamilyTree`.
    - `log`: Hiển thị thành phần `GameLog`.
    - `assets`: Hiển thị thành phần `FamilyAssetsPanel`.
    - `business`: Hiển thị thành phần `BusinessMap`.
- **Modals và tương tác:** Nó hiển thị có điều kiện các modal khác nhau dựa trên các hành động đang chờ xử lý của `gameState`:
    - `EventModal`: Dành cho các sự kiện trong trò chơi.
    - `SchoolChoiceModal`: Để chọn trường học.
    - `ClubChoiceModal`: Để chọn câu lạc bộ.
    - `UniversityChoiceModal`: Để quyết định đi học đại học.
    - `UniversityMajorChoiceModal`: Để chọn chuyên ngành đại học.
    - `CareerChoiceModal`: Để chọn nghề nghiệp.
    - `UnderqualifiedChoiceModal`: Để xử lý các lựa chọn nghề nghiệp không đủ tiêu chuẩn.
    - `LoanModal`: Để vay tiền.
    - `PromotionModal`: Dành cho thăng chức.
    - `BusinessManagementModal`: Để quản lý các doanh nghiệp riêng lẻ.
    - `CharacterDetailModal`: Để hiển thị thông tin chi tiết về nhân vật.
- **UI tiêu đề:** Hiển thị thông tin trò chơi cốt lõi ở trên cùng:
    - Tiêu đề trò chơi và ngày hiện tại.
    - Quỹ gia đình và thay đổi ròng hàng tháng.
    - Lựa chọn ngôn ngữ (tiếng Anh/tiếng Việt).
    - Các nút Thoát, Tạm dừng/Tiếp tục.
    - Điều khiển tốc độ trò chơi (chậm, bình thường, nhanh, rất nhanh).
- Nó truyền các props và callback liên quan cho các thành phần con của nó.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho bố cục tổng thể và các phần tử UI riêng lẻ.

## ImageAssets.ts
Tệp này đóng vai trò là kho lưu trữ trung tâm để nhập và ánh xạ các tài sản hình ảnh khác nhau được sử dụng trong toàn bộ ứng dụng.
- Nó xuất hai đối tượng chính:
    - `imageAssets`: Một `Record` (từ điển) ánh xạ các đường dẫn chuỗi (tương đối với thư mục `public/asset`) đến các lệnh gọi `require()` tương ứng của chúng. Điều này cho phép các thành phần khác dễ dàng tham chiếu hình ảnh bằng đường dẫn của chúng mà không cần sử dụng `require()` trực tiếp. Điều này bao gồm các phần hình đại diện (nền, tóc, mắt, lông mày, miệng, râu, đặc điểm) và các hình ảnh tài sản khác nhau (nhà ở, phương tiện, điện tử, nghệ thuật, đồ trang sức, đồ nội thất, thư viện, phòng tập thể dục, âm nhạc, kỳ nghỉ).
    - `staticAvatars`: Một `Record` ánh xạ các ID số đến các lệnh gọi `require()` cho các hình ảnh hình đại diện tĩnh cụ thể (ví dụ: Mila, Max, Alice). Những hình ảnh này có thể được sử dụng cho các nhân vật được xác định trước không sử dụng trình tạo hình đại diện động.
- Việc sử dụng `require()` cho thấy rằng các hình ảnh này được đóng gói cùng với ứng dụng, phổ biến trong React Native đối với các tài sản cục bộ.

## InstructionsModal.tsx
Thành phần này hiển thị một modal chứa hướng dẫn và quy tắc trò chơi.
- Nó nhận các props `onClose` (callback để đóng modal) và `lang`.
- Nó trình bày các phần hướng dẫn khác nhau, bao gồm:
    - Mục tiêu
    - Cách chơi
    - Sự kiện
    - Chỉ số
    - Giai đoạn
    - Tài chính
- Mỗi phần có tiêu đề in đậm và đoạn mô tả, tất cả đều được bản địa hóa bằng hàm `t`.
- Nó bao gồm một nút đóng (sử dụng `CloseIcon`) để đóng modal.
- Nó sử dụng `ComicPanelModal` làm cơ sở, mang lại cho nó giao diện kiểu truyện tranh.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày hướng dẫn rõ ràng và dễ đọc.

## LoanModal.tsx
Thành phần này hiển thị một modal cho phép người chơi vay tiền.
- Nó nhận các props `onLoanChoice` (callback khi số tiền và kỳ hạn vay được chọn) và `lang`.
- Nó trình bày tiêu đề và mô tả cho các tùy chọn vay.
- Nó cho phép người dùng chọn số tiền vay từ một danh sách được xác định trước (ví dụ: 1.000 đô la, 10.000 đô la) và kỳ hạn vay (ví dụ: 2, 5, 7, 10 năm).
- Số tiền và kỳ hạn đã chọn được làm nổi bật trực quan.
- Nút "Chấp nhận khoản vay" kích hoạt callback `onLoanChoice` với số tiền và kỳ hạn đã chọn.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho lưới lựa chọn rõ ràng và tương tác.

## ModalBase.tsx
Thành phần này cung cấp cấu trúc modal cơ bản với tiêu đề, mô tả và khu vực nội dung, thường được sử dụng làm cơ sở cho các modal cụ thể khác.
- Nó nhận các props `titleKey` (để bản địa hóa), `characterName` (tùy chọn, để hiển thị tên nhân vật), `descriptionKey` (để bản địa hóa), `descriptionReplacements` (tùy chọn, cho văn bản động trong mô tả), `children` (nội dung chính của modal) và `lang`.
- Nó tạo một lớp phủ toàn màn hình với nền bán trong suốt và hiệu ứng làm mờ (sử dụng `@react-native-community/blur`).
- Bảng modal tự nó có nền trắng, đệm và chiều rộng tối đa.
- Nó hiển thị tiêu đề được bản địa hóa, tên nhân vật tùy chọn và mô tả được bản địa hóa.
- Prop `children` cho phép nội dung linh hoạt được hiển thị trong khu vực chính của modal.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho lớp phủ, bảng điều khiển và các phần tử văn bản.

## PromotionModal.tsx
Thành phần này hiển thị một modal thông báo cho người chơi về việc thăng chức của nhân vật.
- Nó nhận các props `characterName` (tên nhân vật được thăng chức), `newTitle` (chức danh mới), `onAccept` (callback khi thăng chức được chấp nhận) và `lang`.
- Nó hiển thị tiêu đề và thông báo mô tả về việc thăng chức, bao gồm tên nhân vật và chức danh mới.
- Nút "Chấp nhận thăng chức" kích hoạt callback `onAccept`.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và súc tích.

## SchoolChoiceModal.tsx
Thành phần này hiển thị một modal cho phép nhân vật chọn một trường học để theo học.
- Nó nhận các props `character` (nhân vật đưa ra lựa chọn), `schoolOptions` (một mảng các tùy chọn trường học có sẵn), `onSelect` (callback khi một trường học được chọn), `currentFunds` (cho chi phí trường học) và `lang`.
- Nó hiển thị tiêu đề và mô tả cho lựa chọn trường học.
- Nó lặp qua các `schoolOptions` được cung cấp và hiển thị một `ChoiceButton` cho mỗi tùy chọn.
- Mỗi `ChoiceButton` hiển thị:
    - Tên trường học.
    - Chi phí của nó, cho biết liệu nhân vật có đủ khả năng chi trả hay không.
    - Các tác động đến chỉ số nhân vật (ví dụ: "+IQ", "+Hạnh phúc").
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và dễ đọc các lựa chọn.

## StartMenu.tsx
Thành phần này hiển thị menu bắt đầu chính của trò chơi, cho phép người dùng chọn một kịch bản để bắt đầu chơi hoặc xem hướng dẫn.
- Nó nhận các props `onStart` (callback để bắt đầu trò chơi với một kịch bản đã chọn), `onShowInstructions` (callback để hiển thị hướng dẫn) và `lang`.
- Nó hiển thị tiêu đề và phụ đề trò chơi.
- Nó liệt kê các kịch bản trò chơi có sẵn (từ `SCENARIOS`), mỗi kịch bản có tên và mô tả.
- Mỗi kịch bản là một `TouchableOpacity` kích hoạt callback `onStart` khi được nhấn.
- Nó bao gồm một nút "Cách chơi" kích hoạt callback `onShowInstructions`.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho một menu rõ ràng và hấp dẫn.

## StatBar.tsx
Thành phần này hiển thị thanh tiến trình trực quan cho một chỉ số của nhân vật, thường đi kèm với biểu tượng và giá trị số.
- Nó nhận các props `label` (tên chỉ số), `value` (giá trị chỉ số hiện tại), `max` (giá trị chỉ số tối đa có thể), `Icon` (thành phần React tùy chọn cho biểu tượng của chỉ số) và `color` (màu tùy chọn cho thanh).
- Nó sử dụng `Animated` từ `react-native` để làm mượt hoạt ảnh chiều rộng của thanh khi prop `value` thay đổi.
- Nó hiển thị nhãn của chỉ số, biểu tượng tùy chọn, thanh tiến trình hoạt hình và giá trị số được làm tròn của chỉ số.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và đầy đủ thông tin.

## SummaryScreen.tsx
Thành phần này hiển thị tóm tắt kết quả trò chơi (thắng hoặc thua) và các số liệu thống kê chính.
- Nó nhận các props `gameState` (trạng thái trò chơi cuối cùng) và `onRestart` (callback để khởi động lại trò chơi) và `lang`.
- Nó xác định xem trò chơi kết thúc bằng chiến thắng hay thua cuộc (bao gồm các lý do cụ thể như nợ nần).
- Nó hiển thị tiêu đề được bản địa hóa và thông báo mô tả dựa trên kết quả trò chơi.
- Nó trình bày một danh sách các số liệu thống kê trò chơi chính:
    - Tổng số thế hệ
    - Tổng số thành viên gia đình
    - Thành viên còn sống
    - Thành viên đã qua đời
    - Trình độ học vấn cao nhất đạt được
    - Nghề nghiệp cao nhất đạt được
    - Quỹ gia đình cuối cùng
    - Tổng giá trị tài sản
    - Năm kết thúc
- Nút "Play Again" kích hoạt callback `onRestart`.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để có một bản tóm tắt rõ ràng và đầy đủ thông tin.

## UnderqualifiedChoiceModal.tsx
Thành phần này hiển thị một modal xuất hiện khi một nhân vật cố gắng theo đuổi một nghề nghiệp mà họ không đủ tiêu chuẩn. Nó cung cấp hai lựa chọn cho người chơi.
- Nó nhận các props `character` (nhân vật đang cố gắng theo đuổi nghề nghiệp), `careerTrackKey` (nghề nghiệp họ đang cố gắng tham gia), `onSelect` (callback khi lựa chọn được thực hiện) và `lang`.
- Nó hiển thị tiêu đề và mô tả giải thích rằng nhân vật không đủ tiêu chuẩn cho nghề nghiệp đã chọn.
- Nó trình bày hai tùy chọn `ChoiceButton`:
    - **Tùy chọn thực tập sinh:** Cho phép nhân vật tham gia nghề nghiệp với tư cách là thực tập sinh, với mô tả về các hàm ý.
    - **Tùy chọn bị phạt:** Cho phép nhân vật tham gia nghề nghiệp nhưng bị phạt, cũng với mô tả về các hàm ý.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và súc tích các lựa chọn.

## UniversityChoiceModal.tsx
Thành phần này hiển thị một modal hỏi người chơi liệu một nhân vật có nên đi học đại học hay không.
- Nó nhận các props `character` (nhân vật đưa ra quyết định), `onSelect` (callback khi lựa chọn được thực hiện) và `lang`.
- Nó hiển thị tiêu đề và thông báo mô tả về lựa chọn đại học.
- Nó trình bày hai nút: "Có" (để đi học đại học) và "Không" (để không đi).
- Mỗi nút kích hoạt callback `onSelect` với một boolean cho biết lựa chọn.
- Nó sử dụng `ComicPanelModal` làm cơ sở.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và đơn giản.

## UniversityMajorChoiceModal.tsx
Thành phần này hiển thị một modal cho phép nhân vật chọn một chuyên ngành đại học.
- Nó nhận các props `character` (nhân vật chọn chuyên ngành), `majors` (một mảng các chuyên ngành có sẵn), `onSelect` (callback khi một chuyên ngành được chọn), `currentFunds` (cho chi phí chuyên ngành), `lang`, và `onAbandon` (callback để từ bỏ đại học nếu không đủ tiền học phí) làm props.
- Nó sử dụng `ModalBase` làm cơ sở, cung cấp tiêu đề và mô tả.
- Nó lặp qua các `majors` được cung cấp và hiển thị một `ChoiceButton` cho mỗi chuyên ngành.
- Mỗi `ChoiceButton` hiển thị:
    - Tên chuyên ngành.
    - Chi phí của nó, cho biết liệu nhân vật có đủ khả năng chi trả hay không.
    - Mô tả chuyên ngành.
- Nếu tất cả các chuyên ngành đều không đủ khả năng chi trả, nó sẽ hiển thị một thông báo và nút "Từ bỏ đại học".
- Kiểu dáng được xử lý thông qua `StyleSheet.create` để trình bày rõ ràng và dễ đọc các lựa chọn.

## WelcomeBackMenu.tsx
Thành phần này hiển thị một menu xuất hiện khi người dùng quay lại trò chơi, cung cấp các tùy chọn để tiếp tục trò chơi đã lưu hoặc bắt đầu trò chơi mới.
- Nó nhận các props `onContinue` (callback để tiếp tục trò chơi) và `onStartNew` (callback để bắt đầu trò chơi mới) và `lang`.
- Nó hiển thị tiêu đề "Welcome Back!" và một phụ đề.
- Nó trình bày hai nút nổi bật:
    - "Continue Game" (nút màu xanh lá cây)
    - "Start New Game" (nút màu xám)
- Mỗi nút kích hoạt callback tương ứng khi được nhấn.
- Kiểu dáng được xử lý thông qua `StyleSheet.create` cho một menu rõ ràng và hấp dẫn.

## icons.tsx
Tệp này định nghĩa một bộ sưu tập các biểu tượng SVG có thể tái sử dụng cho các mục đích khác nhau trong giao diện người dùng trò chơi.
- Nó sử dụng `react-native-svg` để hiển thị các đường dẫn SVG dưới dạng các thành phần React.
- Mỗi thành phần biểu tượng (`IqIcon`, `HappinessIcon`, `EqIcon`, `HealthIcon`, `SkillIcon`, `MoneyIcon`, `MaleIcon`, `FemaleIcon`, `DogIcon`, `CatIcon`, `ParrotIcon`, `HorseIcon`, `FishIcon`, `RobotIcon`, `RobotAvatarIcon`, `UpgradeIcon`, `LockClosedIcon`, `CloseIcon`) là một thành phần chức năng chấp nhận các props `style`, `color`, `width`, và `height` để tùy chỉnh.
- Nó cũng xuất một hàm `getPetIcon` trả về thành phần biểu tượng thú cưng thích hợp dựa trên một `PetType` enum.
- Các biểu tượng được sử dụng chủ yếu để trực quan hóa các chỉ số nhân vật, giới tính, thú cưng, tiền tệ và các hành động UI (ví dụ: đóng, nâng cấp, khóa).
